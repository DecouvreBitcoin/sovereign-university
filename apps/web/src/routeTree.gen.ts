/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as TutorialsIndexImport } from './routes/tutorials/index';
import { Route as ResourcesIndexImport } from './routes/resources/index';
import { Route as EventsIndexImport } from './routes/events/index';
import { Route as CoursesIndexImport } from './routes/courses/index';
import { Route as TutorialsCategoryImport } from './routes/tutorials/$category';
import { Route as ResourcesPodcastsImport } from './routes/resources/podcasts';
import { Route as ResourcesGlossaryImport } from './routes/resources/glossary';
import { Route as ResourcesConferencesImport } from './routes/resources/conferences';
import { Route as ResourcesBuildersImport } from './routes/resources/builders';
import { Route as ResourcesBooksImport } from './routes/resources/books';
import { Route as ResourcesBetImport } from './routes/resources/bet';
import { Route as EventsEventIdImport } from './routes/events/$eventId';
import { Route as DashboardProfileImport } from './routes/dashboard/profile';
import { Route as DashboardCoursesImport } from './routes/dashboard/courses';
import { Route as DashboardCalendarImport } from './routes/dashboard/calendar';
import { Route as DashboardBookingsImport } from './routes/dashboard/bookings';
import { Route as CoursesCourseIdImport } from './routes/courses/$courseId';
import { Route as MiscUnderConstructionImport } from './routes/_misc/under-construction';
import { Route as MiscTermsAndConditionsImport } from './routes/_misc/terms-and-conditions';
import { Route as MiscProfessorsImport } from './routes/_misc/professors';
import { Route as MiscNodeNetworkImport } from './routes/_misc/node-network';
import { Route as MiscManifestoImport } from './routes/_misc/manifesto';
import { Route as MiscBCertificateImport } from './routes/_misc/b-certificate';
import { Route as MiscAboutImport } from './routes/_misc/about';
import { Route as TutorialsCategoryCategoryNameImport } from './routes/tutorials-category/$category.$name';
import { Route as ResourcesPodcastPodcastIdImport } from './routes/resources/podcast.$podcastId';
import { Route as ResourcesGlossaryWordIdImport } from './routes/resources/glossary.$wordId';
import { Route as ResourcesConferenceConferenceIdImport } from './routes/resources/conference.$conferenceId';
import { Route as ResourcesBuilderBuilderIdImport } from './routes/resources/builder.$builderId';
import { Route as ResourcesBookBookIdImport } from './routes/resources/book.$bookId';
import { Route as CoursesChapterCourseIdChapterIdImport } from './routes/courses-chapter/$courseId.$chapterId';
import { Route as MiscValidateEmailTokenImport } from './routes/_misc/validate-email.$token';
import { Route as MiscResetPasswordTokenImport } from './routes/_misc/reset-password.$token';
import { Route as MiscProfessorProfessorIdImport } from './routes/_misc/professor.$professorId';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const TutorialsIndexRoute = TutorialsIndexImport.update({
  path: '/tutorials/',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesIndexRoute = ResourcesIndexImport.update({
  path: '/resources/',
  getParentRoute: () => rootRoute,
} as any);

const EventsIndexRoute = EventsIndexImport.update({
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any);

const CoursesIndexRoute = CoursesIndexImport.update({
  path: '/courses/',
  getParentRoute: () => rootRoute,
} as any);

const TutorialsCategoryRoute = TutorialsCategoryImport.update({
  path: '/tutorials/$category',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesPodcastsRoute = ResourcesPodcastsImport.update({
  path: '/resources/podcasts',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesGlossaryRoute = ResourcesGlossaryImport.update({
  path: '/resources/glossary',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesConferencesRoute = ResourcesConferencesImport.update({
  path: '/resources/conferences',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesBuildersRoute = ResourcesBuildersImport.update({
  path: '/resources/builders',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesBooksRoute = ResourcesBooksImport.update({
  path: '/resources/books',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesBetRoute = ResourcesBetImport.update({
  path: '/resources/bet',
  getParentRoute: () => rootRoute,
} as any);

const EventsEventIdRoute = EventsEventIdImport.update({
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any);

const DashboardProfileRoute = DashboardProfileImport.update({
  path: '/dashboard/profile',
  getParentRoute: () => rootRoute,
} as any);

const DashboardCoursesRoute = DashboardCoursesImport.update({
  path: '/dashboard/courses',
  getParentRoute: () => rootRoute,
} as any);

const DashboardCalendarRoute = DashboardCalendarImport.update({
  path: '/dashboard/calendar',
  getParentRoute: () => rootRoute,
} as any);

const DashboardBookingsRoute = DashboardBookingsImport.update({
  path: '/dashboard/bookings',
  getParentRoute: () => rootRoute,
} as any);

const CoursesCourseIdRoute = CoursesCourseIdImport.update({
  path: '/courses/$courseId',
  getParentRoute: () => rootRoute,
} as any);

const MiscUnderConstructionRoute = MiscUnderConstructionImport.update({
  path: '/under-construction',
  getParentRoute: () => rootRoute,
} as any);

const MiscTermsAndConditionsRoute = MiscTermsAndConditionsImport.update({
  path: '/terms-and-conditions',
  getParentRoute: () => rootRoute,
} as any);

const MiscProfessorsRoute = MiscProfessorsImport.update({
  path: '/professors',
  getParentRoute: () => rootRoute,
} as any);

const MiscNodeNetworkRoute = MiscNodeNetworkImport.update({
  path: '/node-network',
  getParentRoute: () => rootRoute,
} as any);

const MiscManifestoRoute = MiscManifestoImport.update({
  path: '/manifesto',
  getParentRoute: () => rootRoute,
} as any);

const MiscBCertificateRoute = MiscBCertificateImport.update({
  path: '/b-certificate',
  getParentRoute: () => rootRoute,
} as any);

const MiscAboutRoute = MiscAboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const TutorialsCategoryCategoryNameRoute =
  TutorialsCategoryCategoryNameImport.update({
    path: '/tutorials-category/$category/$name',
    getParentRoute: () => rootRoute,
  } as any);

const ResourcesPodcastPodcastIdRoute = ResourcesPodcastPodcastIdImport.update({
  path: '/resources/podcast/$podcastId',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesGlossaryWordIdRoute = ResourcesGlossaryWordIdImport.update({
  path: '/$wordId',
  getParentRoute: () => ResourcesGlossaryRoute,
} as any);

const ResourcesConferenceConferenceIdRoute =
  ResourcesConferenceConferenceIdImport.update({
    path: '/resources/conference/$conferenceId',
    getParentRoute: () => rootRoute,
  } as any);

const ResourcesBuilderBuilderIdRoute = ResourcesBuilderBuilderIdImport.update({
  path: '/resources/builder/$builderId',
  getParentRoute: () => rootRoute,
} as any);

const ResourcesBookBookIdRoute = ResourcesBookBookIdImport.update({
  path: '/resources/book/$bookId',
  getParentRoute: () => rootRoute,
} as any);

const CoursesChapterCourseIdChapterIdRoute =
  CoursesChapterCourseIdChapterIdImport.update({
    path: '/courses-chapter/$courseId/$chapterId',
    getParentRoute: () => rootRoute,
  } as any);

const MiscValidateEmailTokenRoute = MiscValidateEmailTokenImport.update({
  path: '/validate-email/$token',
  getParentRoute: () => rootRoute,
} as any);

const MiscResetPasswordTokenRoute = MiscResetPasswordTokenImport.update({
  path: '/reset-password/$token',
  getParentRoute: () => rootRoute,
} as any);

const MiscProfessorProfessorIdRoute = MiscProfessorProfessorIdImport.update({
  path: '/professor/$professorId',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/about': {
      id: '/_misc/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof MiscAboutImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/b-certificate': {
      id: '/_misc/b-certificate';
      path: '/b-certificate';
      fullPath: '/b-certificate';
      preLoaderRoute: typeof MiscBCertificateImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/manifesto': {
      id: '/_misc/manifesto';
      path: '/manifesto';
      fullPath: '/manifesto';
      preLoaderRoute: typeof MiscManifestoImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/node-network': {
      id: '/_misc/node-network';
      path: '/node-network';
      fullPath: '/node-network';
      preLoaderRoute: typeof MiscNodeNetworkImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/professors': {
      id: '/_misc/professors';
      path: '/professors';
      fullPath: '/professors';
      preLoaderRoute: typeof MiscProfessorsImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/terms-and-conditions': {
      id: '/_misc/terms-and-conditions';
      path: '/terms-and-conditions';
      fullPath: '/terms-and-conditions';
      preLoaderRoute: typeof MiscTermsAndConditionsImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/under-construction': {
      id: '/_misc/under-construction';
      path: '/under-construction';
      fullPath: '/under-construction';
      preLoaderRoute: typeof MiscUnderConstructionImport;
      parentRoute: typeof rootRoute;
    };
    '/courses/$courseId': {
      id: '/courses/$courseId';
      path: '/courses/$courseId';
      fullPath: '/courses/$courseId';
      preLoaderRoute: typeof CoursesCourseIdImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard/bookings': {
      id: '/dashboard/bookings';
      path: '/dashboard/bookings';
      fullPath: '/dashboard/bookings';
      preLoaderRoute: typeof DashboardBookingsImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard/calendar': {
      id: '/dashboard/calendar';
      path: '/dashboard/calendar';
      fullPath: '/dashboard/calendar';
      preLoaderRoute: typeof DashboardCalendarImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard/courses': {
      id: '/dashboard/courses';
      path: '/dashboard/courses';
      fullPath: '/dashboard/courses';
      preLoaderRoute: typeof DashboardCoursesImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard/profile': {
      id: '/dashboard/profile';
      path: '/dashboard/profile';
      fullPath: '/dashboard/profile';
      preLoaderRoute: typeof DashboardProfileImport;
      parentRoute: typeof rootRoute;
    };
    '/events/$eventId': {
      id: '/events/$eventId';
      path: '/events/$eventId';
      fullPath: '/events/$eventId';
      preLoaderRoute: typeof EventsEventIdImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/bet': {
      id: '/resources/bet';
      path: '/resources/bet';
      fullPath: '/resources/bet';
      preLoaderRoute: typeof ResourcesBetImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/books': {
      id: '/resources/books';
      path: '/resources/books';
      fullPath: '/resources/books';
      preLoaderRoute: typeof ResourcesBooksImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/builders': {
      id: '/resources/builders';
      path: '/resources/builders';
      fullPath: '/resources/builders';
      preLoaderRoute: typeof ResourcesBuildersImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/conferences': {
      id: '/resources/conferences';
      path: '/resources/conferences';
      fullPath: '/resources/conferences';
      preLoaderRoute: typeof ResourcesConferencesImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/glossary': {
      id: '/resources/glossary';
      path: '/resources/glossary';
      fullPath: '/resources/glossary';
      preLoaderRoute: typeof ResourcesGlossaryImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/podcasts': {
      id: '/resources/podcasts';
      path: '/resources/podcasts';
      fullPath: '/resources/podcasts';
      preLoaderRoute: typeof ResourcesPodcastsImport;
      parentRoute: typeof rootRoute;
    };
    '/tutorials/$category': {
      id: '/tutorials/$category';
      path: '/tutorials/$category';
      fullPath: '/tutorials/$category';
      preLoaderRoute: typeof TutorialsCategoryImport;
      parentRoute: typeof rootRoute;
    };
    '/courses/': {
      id: '/courses/';
      path: '/courses';
      fullPath: '/courses';
      preLoaderRoute: typeof CoursesIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/events/': {
      id: '/events/';
      path: '/events';
      fullPath: '/events';
      preLoaderRoute: typeof EventsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/': {
      id: '/resources/';
      path: '/resources';
      fullPath: '/resources';
      preLoaderRoute: typeof ResourcesIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/tutorials/': {
      id: '/tutorials/';
      path: '/tutorials';
      fullPath: '/tutorials';
      preLoaderRoute: typeof TutorialsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/professor/$professorId': {
      id: '/_misc/professor/$professorId';
      path: '/professor/$professorId';
      fullPath: '/professor/$professorId';
      preLoaderRoute: typeof MiscProfessorProfessorIdImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/reset-password/$token': {
      id: '/_misc/reset-password/$token';
      path: '/reset-password/$token';
      fullPath: '/reset-password/$token';
      preLoaderRoute: typeof MiscResetPasswordTokenImport;
      parentRoute: typeof rootRoute;
    };
    '/_misc/validate-email/$token': {
      id: '/_misc/validate-email/$token';
      path: '/validate-email/$token';
      fullPath: '/validate-email/$token';
      preLoaderRoute: typeof MiscValidateEmailTokenImport;
      parentRoute: typeof rootRoute;
    };
    '/courses-chapter/$courseId/$chapterId': {
      id: '/courses-chapter/$courseId/$chapterId';
      path: '/courses-chapter/$courseId/$chapterId';
      fullPath: '/courses-chapter/$courseId/$chapterId';
      preLoaderRoute: typeof CoursesChapterCourseIdChapterIdImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/book/$bookId': {
      id: '/resources/book/$bookId';
      path: '/resources/book/$bookId';
      fullPath: '/resources/book/$bookId';
      preLoaderRoute: typeof ResourcesBookBookIdImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/builder/$builderId': {
      id: '/resources/builder/$builderId';
      path: '/resources/builder/$builderId';
      fullPath: '/resources/builder/$builderId';
      preLoaderRoute: typeof ResourcesBuilderBuilderIdImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/conference/$conferenceId': {
      id: '/resources/conference/$conferenceId';
      path: '/resources/conference/$conferenceId';
      fullPath: '/resources/conference/$conferenceId';
      preLoaderRoute: typeof ResourcesConferenceConferenceIdImport;
      parentRoute: typeof rootRoute;
    };
    '/resources/glossary/$wordId': {
      id: '/resources/glossary/$wordId';
      path: '/$wordId';
      fullPath: '/resources/glossary/$wordId';
      preLoaderRoute: typeof ResourcesGlossaryWordIdImport;
      parentRoute: typeof ResourcesGlossaryImport;
    };
    '/resources/podcast/$podcastId': {
      id: '/resources/podcast/$podcastId';
      path: '/resources/podcast/$podcastId';
      fullPath: '/resources/podcast/$podcastId';
      preLoaderRoute: typeof ResourcesPodcastPodcastIdImport;
      parentRoute: typeof rootRoute;
    };
    '/tutorials-category/$category/$name': {
      id: '/tutorials-category/$category/$name';
      path: '/tutorials-category/$category/$name';
      fullPath: '/tutorials-category/$category/$name';
      preLoaderRoute: typeof TutorialsCategoryCategoryNameImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  MiscAboutRoute,
  MiscBCertificateRoute,
  MiscManifestoRoute,
  MiscNodeNetworkRoute,
  MiscProfessorsRoute,
  MiscTermsAndConditionsRoute,
  MiscUnderConstructionRoute,
  CoursesCourseIdRoute,
  DashboardBookingsRoute,
  DashboardCalendarRoute,
  DashboardCoursesRoute,
  DashboardProfileRoute,
  EventsEventIdRoute,
  ResourcesBetRoute,
  ResourcesBooksRoute,
  ResourcesBuildersRoute,
  ResourcesConferencesRoute,
  ResourcesGlossaryRoute: ResourcesGlossaryRoute.addChildren({
    ResourcesGlossaryWordIdRoute,
  }),
  ResourcesPodcastsRoute,
  TutorialsCategoryRoute,
  CoursesIndexRoute,
  EventsIndexRoute,
  ResourcesIndexRoute,
  TutorialsIndexRoute,
  MiscProfessorProfessorIdRoute,
  MiscResetPasswordTokenRoute,
  MiscValidateEmailTokenRoute,
  CoursesChapterCourseIdChapterIdRoute,
  ResourcesBookBookIdRoute,
  ResourcesBuilderBuilderIdRoute,
  ResourcesConferenceConferenceIdRoute,
  ResourcesPodcastPodcastIdRoute,
  TutorialsCategoryCategoryNameRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_misc/about",
        "/_misc/b-certificate",
        "/_misc/manifesto",
        "/_misc/node-network",
        "/_misc/professors",
        "/_misc/terms-and-conditions",
        "/_misc/under-construction",
        "/courses/$courseId",
        "/dashboard/bookings",
        "/dashboard/calendar",
        "/dashboard/courses",
        "/dashboard/profile",
        "/events/$eventId",
        "/resources/bet",
        "/resources/books",
        "/resources/builders",
        "/resources/conferences",
        "/resources/glossary",
        "/resources/podcasts",
        "/tutorials/$category",
        "/courses/",
        "/events/",
        "/resources/",
        "/tutorials/",
        "/_misc/professor/$professorId",
        "/_misc/reset-password/$token",
        "/_misc/validate-email/$token",
        "/courses-chapter/$courseId/$chapterId",
        "/resources/book/$bookId",
        "/resources/builder/$builderId",
        "/resources/conference/$conferenceId",
        "/resources/podcast/$podcastId",
        "/tutorials-category/$category/$name"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_misc/about": {
      "filePath": "_misc/about.tsx"
    },
    "/_misc/b-certificate": {
      "filePath": "_misc/b-certificate.tsx"
    },
    "/_misc/manifesto": {
      "filePath": "_misc/manifesto.tsx"
    },
    "/_misc/node-network": {
      "filePath": "_misc/node-network.tsx"
    },
    "/_misc/professors": {
      "filePath": "_misc/professors.tsx"
    },
    "/_misc/terms-and-conditions": {
      "filePath": "_misc/terms-and-conditions.tsx"
    },
    "/_misc/under-construction": {
      "filePath": "_misc/under-construction.tsx"
    },
    "/courses/$courseId": {
      "filePath": "courses/$courseId.tsx"
    },
    "/dashboard/bookings": {
      "filePath": "dashboard/bookings.tsx"
    },
    "/dashboard/calendar": {
      "filePath": "dashboard/calendar.tsx"
    },
    "/dashboard/courses": {
      "filePath": "dashboard/courses.tsx"
    },
    "/dashboard/profile": {
      "filePath": "dashboard/profile.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/resources/bet": {
      "filePath": "resources/bet.tsx"
    },
    "/resources/books": {
      "filePath": "resources/books.tsx"
    },
    "/resources/builders": {
      "filePath": "resources/builders.tsx"
    },
    "/resources/conferences": {
      "filePath": "resources/conferences.tsx"
    },
    "/resources/glossary": {
      "filePath": "resources/glossary.tsx",
      "children": [
        "/resources/glossary/$wordId"
      ]
    },
    "/resources/podcasts": {
      "filePath": "resources/podcasts.tsx"
    },
    "/tutorials/$category": {
      "filePath": "tutorials/$category.tsx"
    },
    "/courses/": {
      "filePath": "courses/index.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/resources/": {
      "filePath": "resources/index.tsx"
    },
    "/tutorials/": {
      "filePath": "tutorials/index.tsx"
    },
    "/_misc/professor/$professorId": {
      "filePath": "_misc/professor.$professorId.tsx"
    },
    "/_misc/reset-password/$token": {
      "filePath": "_misc/reset-password.$token.tsx"
    },
    "/_misc/validate-email/$token": {
      "filePath": "_misc/validate-email.$token.tsx"
    },
    "/courses-chapter/$courseId/$chapterId": {
      "filePath": "courses-chapter/$courseId.$chapterId.tsx"
    },
    "/resources/book/$bookId": {
      "filePath": "resources/book.$bookId.tsx"
    },
    "/resources/builder/$builderId": {
      "filePath": "resources/builder.$builderId.tsx"
    },
    "/resources/conference/$conferenceId": {
      "filePath": "resources/conference.$conferenceId.tsx"
    },
    "/resources/glossary/$wordId": {
      "filePath": "resources/glossary.$wordId.tsx",
      "parent": "/resources/glossary"
    },
    "/resources/podcast/$podcastId": {
      "filePath": "resources/podcast.$podcastId.tsx"
    },
    "/tutorials-category/$category/$name": {
      "filePath": "tutorials-category/$category.$name.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
