diff --git a/cjs/src/index.js b/cjs/src/index.js
index 1211e41627747491a50828d607f997e90ab62edb..f97840c33840e5807e24f8405b79ddba454f5912 100644
--- a/cjs/src/index.js
+++ b/cjs/src/index.js
@@ -97,7 +97,8 @@ function Postgres(a, b) {
       unsafe,
       array,
       json,
-      file
+      file,
+      exec
     })
 
     return sql
@@ -116,6 +117,12 @@ function Postgres(a, b) {
       return query
     }
 
+    function exec(originalQuery) {
+      const query = new Query(originalQuery.strings, originalQuery.args, handler, cancel)
+      query.execute();
+      return query;
+    }
+
     function unsafe(string, args = [], options = {}) {
       arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])
       const query = new Query([string], args, handler, cancel, {
diff --git a/src/index.js b/src/index.js
index d9fc597cd4470614916afa0712a18041888fafcc..0ed935941e8d5e9eabd351ae622ca16b283af9e9 100644
--- a/src/index.js
+++ b/src/index.js
@@ -78,7 +78,8 @@ function Postgres(a, b) {
     notify,
     begin,
     close,
-    end
+    end,
+    exec
   })
 
   return sql
@@ -116,6 +117,12 @@ function Postgres(a, b) {
       return query
     }
 
+    function exec(originalQuery) {
+      const query = new Query(originalQuery.strings, originalQuery.args, handler, cancel)
+      query.execute();
+      return query;
+    }
+
     function unsafe(string, args = [], options = {}) {
       arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])
       const query = new Query([string], args, handler, cancel, {
diff --git a/types/index.d.ts b/types/index.d.ts
index 1f057c06fe578ee472dc2d406b73b42b699d9742..9a1903b8fd71650000884ae7fffc040e8ff3408d 100644
--- a/types/index.d.ts
+++ b/types/index.d.ts
@@ -682,6 +682,8 @@ declare namespace postgres {
     file<T extends readonly any[] = Row[]>(path: string | Buffer | URL | number, options?: { cache?: boolean | undefined } | undefined): PendingQuery<T>;
     file<T extends readonly any[] = Row[]>(path: string | Buffer | URL | number, args: (ParameterOrJSON<TTypes[keyof TTypes]>)[], options?: { cache?: boolean | undefined } | undefined): PendingQuery<T>;
     json(value: JSONValue): Parameter;
+
+    exec<T extends readonly (object | undefined)[] = Row[]>(query: PendingQuery<T>): Promise<RowList<T>>;
   }
 
   interface UnsafeQueryOptions {